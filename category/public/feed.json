{
    "version": "https://jsonfeed.org/version/1",
    "title": "lcy's blog • All posts by \"public\" category",
    "description": "学习/科研/生活/阅读",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/",
            "url": "http://example.com/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/",
            "title": "如何优化gemm算子",
            "date_published": "2024-07-19T03:12:35.000Z",
            "content_html": "<p>最近在做开源之下的项目，记录一下学习gemm的优化过程。</p>\n<span id=\"more\"></span>\n<p>gemm即矩阵乘法，通常的gemm可表示为一个MxK的矩阵A和一个KxN的矩阵B相乘得到一个MxN的矩阵C。矩阵计算的优化思路可以总结为以下几步，在这个博客中省去了对计算机组成原理的一些介绍。</p>\n<h2 id=\"优化思路\"><a href=\"#优化思路\" class=\"headerlink\" title=\"优化思路\"></a>优化思路</h2><ol>\n<li><p><strong>Split MNK</strong></p>\n<p> 这一步优化主要是<strong>基于计算机体系架构的cache结构，节省计算数据在cache和内存间读取的时间</strong>。<br> 切分MNK（根据L1 cache的大小），比如arm64中FP32M8N12就是将矩阵A（MxK）切分为若干个（8xK）矩阵，将矩阵B（KxN）切分为若干个（Kx12）的矩阵，在第2步中提到了为何这么切分。</p>\n</li>\n<li><p><strong>分层计算</strong></p>\n<p> 这一步优化主要是<strong>节省中间数据在内存和cache之间换入换出</strong>的时间。<br> 传统的MNK矩阵切分计算后，应该是A的小矩阵的每一<strong>行</strong>乘上B的小矩阵的每一<strong>列</strong>，这种做法比较低效，且存在很多冗余的重复加载。<br> 分层计算的核心是每次用A的小矩阵的每一<strong>列</strong>（8个元素，1X8矩阵）和B的小矩阵的每一<strong>行</strong>（12个元素，12X1矩阵）相乘，得到中间结果矩阵（一层8x12矩阵），在这个过程中，把每一个中间结果矩阵累加，就得到了小矩阵8K和小矩阵K12计算的结果（完整8x12矩阵）。<br> 以arm64架构的CPU为例子，有32个128位的neon向量寄存器，那么M8N12的每次分层计算中，A需要从内存中读取8个元素，占用2个寄存器；B需要从内存中读取12个元素，占用3个寄存器；C（中间结果）的形状为8x12，需要占用24个寄存器来累加运算。</p>\n</li>\n<li><p><strong>SIMD优化</strong></p>\n<p> 这一步优化主要是<strong>通过并行计算提高数据运算的速度</strong>。在cache计算中使用SIMD优化，并行计算元素与元素相乘的过程。</p>\n</li>\n<li><p><strong>内存重排（pack）</strong></p>\n<p> 这一步的优化主要是<strong>节省数据在内存中读取的时间</strong>。<br> 以x86的CPU为例，矩阵在内存中是逐行存储的，一个4x4的矩阵A的存储顺序（由小到大）为</p>\n<p> | 0 | 1 | 2 | 3 |<br> | 4 | 5 | 6 | 7 |<br> | 8 | 9 | A | B |<br> | C | D | E | F |</p>\n<p> 假设该矩阵被分割成2个2x2的矩阵，在计算中需要逐列读取，那么第一个被读取的元素是0处的，第二个被读取的元素是4处的，他们的地址并不连续，这会浪费一定的寻址时间。因此，在2x2的分割下，需要针对该矩阵进行内存重排，重排后的顺序如下,这种重排叫做zigzag，因为是按照之字型排序的。</p>\n<p> | 0 | 2 | 4 | 6 |<br> | 1 | 3 | 5 | 7 |<br> | 8 | A | C | E |<br> | 9 | B | D | F |</p>\n</li>\n</ol>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>以Megcc生成的算子<code>Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS</code>为例子，分析一下如何实现gemm优化过后的算子。这是按照M8N12K4的分割的，想象一个三维的长方体分割就可以。</p>\n<ol>\n<li><p><strong>重排内存</strong></p>\n<p> kernel的执行入口是<code>void Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS</code>，该程序首先确认矩阵的内存空间。</p>\n<ul>\n<li><p>Code</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">size_t</span> pack_a_size = Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_workspace_a(<span class=\"number\">0</span>, M, <span class=\"number\">0</span>, K);</span><br><span class=\"line\"><span class=\"type\">float</span>* pack_a = workspace; # 矩阵A的开始地址</span><br><span class=\"line\"><span class=\"type\">float</span>* pack_b = workspace + pack_a_size; #矩阵B的开始地址</span><br><span class=\"line\">Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packa_n(pack_a, A, LDA, <span class=\"number\">0</span>, M, <span class=\"number\">0</span>, K); </span><br><span class=\"line\"># 按照上述第<span class=\"number\">4</span>步对矩阵进行重排</span><br><span class=\"line\">Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packb_n(pack_b, B, LDB, <span class=\"number\">0</span>, N, <span class=\"number\">0</span>, K); </span><br><span class=\"line\"># 按照上述第<span class=\"number\">4</span>步对矩阵进行重排</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>矩阵计算</strong></p>\n<p> 矩阵的计算是逐Block进行的， M8N12K4的计算方式中，每一个块的大小为8x12x4。</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (; m + m_block &lt;= M; m += m_block) {</span><br><span class=\"line\">        <span class=\"type\">float</span>* output = C + (m / pack_mk * LDC);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">size_t</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">float</span>* cur_pack_b = pack_b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; n + n_block &lt;= N; n += n_block) {</span><br><span class=\"line\">            kern_8x12_bias_relu(pack_a, cur_pack_b, K, output, LDC, _bias_ptr); # 每一个小block的计算</span><br><span class=\"line\">            output += n_block * pack_mk;</span><br><span class=\"line\">            ;</span><br><span class=\"line\">            cur_pack_b += K12;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        # 当n不能被<span class=\"number\">12</span>整除时，剩下的n按照<span class=\"number\">4</span>分割计算。</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; n &lt; N; n += <span class=\"number\">4</span>) {</span><br><span class=\"line\">            kern_8x4_bias_relu(</span><br><span class=\"line\">                    pack_a, cur_pack_b, K, output, LDC, _bias_ptr,</span><br><span class=\"line\">                    N - n &gt; <span class=\"number\">4</span> ? <span class=\"number\">4</span> : N - n); </span><br><span class=\"line\">                    # 即使剩下的不能被<span class=\"number\">4</span>整除也按照<span class=\"number\">4</span>向上对齐处理。</span><br><span class=\"line\">            output += <span class=\"number\">4</span> * pack_mk;</span><br><span class=\"line\">            ;</span><br><span class=\"line\">            cur_pack_b += K4;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        pack_a += K8;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    #当m不能被<span class=\"number\">8</span>整除时，剩下的m的维度按照<span class=\"number\">4</span>整除计算。</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; m &lt; M; m += m_block_4) {</span><br><span class=\"line\">        <span class=\"type\">float</span>* output = C + (m / pack_mk * LDC);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">size_t</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">float</span>* cur_pack_b = pack_b;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; n + n_block - <span class=\"number\">1</span> &lt; N; n += n_block) {</span><br><span class=\"line\">            kern_4x12_bias_relu(pack_a, cur_pack_b, K, output, LDC, _bias_ptr);</span><br><span class=\"line\">            output += n_block * pack_mk;</span><br><span class=\"line\">            ;</span><br><span class=\"line\">            cur_pack_b += K12;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        #同上</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; n &lt; N; n += <span class=\"number\">4</span>) {</span><br><span class=\"line\">            kern_4x4_bias_relu(</span><br><span class=\"line\">                    pack_a, cur_pack_b, K, output, LDC, _bias_ptr,</span><br><span class=\"line\">                    N - n &gt; <span class=\"number\">4</span> ? <span class=\"number\">4</span> : N - n);</span><br><span class=\"line\">            output += <span class=\"number\">4</span> * pack_mk;</span><br><span class=\"line\">            ;</span><br><span class=\"line\">            cur_pack_b += K4;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        pack_a += K4;</span><br><span class=\"line\">    }</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>汇编实现：内存重排</strong></p>\n<p> 对A进行内存重排的程序入口如下，矩阵A的形状为[M/4, K/4, 4, 4]，如下图所示，A矩阵在内存中首先以块顺序0-7存储，在每一块内按照0-F的顺序存储。对A进行内存重排后的形状为[M/8, K, 8]，在图中为了方便理解，箭头方向为数据存储的方向，假设M=16，K=8。</p>\n <center>\n     <img src=\"/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/1.svg\" style=\"width:99%\">\n </center>\n \n<p> 以下程序描述了如何进行内存重排的过程。首先需要两个指针<code>inptr0</code>和<code>inptr1</code>定位原矩阵的内存，其中<code>inptr0</code> 定位的是第0矩阵块（以下都称为块，描述的是上图中矩阵的分块情况）内存起点，<code>inptr1</code>定位的是第2块内存起点，<code>prefetch_2x</code> 函数的作用是读取32个fp32数据，即2块，该函数将0、1和2、3块数据加载到缓存中，<code>interleave_2x4_4_s</code> 是重排函数，作用是将载入缓存的块数据重排，具体如何展开请看后续。注意，若m不被8整除，需要在下一个循环代码中处理尾部数据。</p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packa_n</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">float</span>* outptr, <span class=\"type\">const</span> <span class=\"type\">float</span>* inptr, <span class=\"type\">int</span> ldin, <span class=\"type\">int</span> y0, <span class=\"type\">int</span> ymax, <span class=\"type\">int</span> k0,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">int</span> kmax)</span> {</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> pack_mk = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> pack_m = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> m_stride = pack_m * pack_mk;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> min_m_stride = pack_mk * pack_mk;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; y + <span class=\"number\">7</span> &lt; ymax; y += pack_m) {</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">float</span>* inptr0 = inptr + y / pack_mk * ldin;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">float</span>* inptr1 = inptr0 + ldin;</span><br><span class=\"line\">        prefetch_2x(inptr0);</span><br><span class=\"line\">        prefetch_2x(inptr1);</span><br><span class=\"line\">        <span class=\"type\">int</span> k = (kmax);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; k &gt; <span class=\"number\">3</span>; k -= pack_mk) {</span><br><span class=\"line\">            interleave_2x4_4_s(inptr0, inptr1, outptr);</span><br><span class=\"line\">            outptr += m_stride;</span><br><span class=\"line\">            inptr0 += min_m_stride;</span><br><span class=\"line\">            inptr1 += min_m_stride;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\"># m不被8整除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; y &lt; ymax; y += pack_mk) {</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">float</span>* inptr0 = inptr + y / pack_mk * ldin;</span><br><span class=\"line\">        prefetch_2x(inptr0);</span><br><span class=\"line\">        <span class=\"type\">int</span> K = (kmax);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; K &gt; <span class=\"number\">3</span>; K -= pack_mk) {</span><br><span class=\"line\">            interleave_1x4_4_s(inptr0, outptr);</span><br><span class=\"line\">            outptr += min_m_stride;</span><br><span class=\"line\">            inptr0 += min_m_stride;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 重排函数实现的重点是函数<code>interleave_2x4_4_s</code> ，下图描述了矩阵A内存重排的实现过程。其中v0-v7为寄存器。程序首先将数据加载到寄存器后，重排顺序后再输出到矩阵A的输出位置指针。</p>\n <center>\n     <img src=\"/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/2.svg\" style=\"width:99%\">\n </center>\n \n<p> 对B实现内存重排的原理类似，其原始形状为[K/4, N, 4]，重排后形状为[N/12, K, 12]，其形状变化和内存排序如下图所示，和A相比，需要多进行一个类似转置的操作。如下图所示，该重排把一个4x12的矩阵块（第一块绿色，紫色，黄色的三块）重排成了一个12x4的矩阵块。</p>\n <center>\n     <img src=\"/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/3.svg\" style=\"width:99%\">\n </center>\n \n\n     \n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packb_n</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">float</span>* outptr, <span class=\"type\">const</span> <span class=\"type\">float</span>* inptr, <span class=\"type\">int</span> ldin, <span class=\"type\">int</span> x0, <span class=\"type\">int</span> xmax, <span class=\"type\">int</span> k0,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"type\">int</span> kmax)</span> {</span><br><span class=\"line\">    <span class=\"type\">float</span> tmpbuff[<span class=\"number\">16</span>] = {<span class=\"number\">0.0f</span>};</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> PACK_C_SIZE = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ksize = kmax - k0;</span><br><span class=\"line\">    <span class=\"type\">int</span> ksize12 = ksize * <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ksize4 = (ksize &lt;&lt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">float</span>* outptr_base = outptr;</span><br><span class=\"line\">    <span class=\"type\">float</span>* outptr_base4 = outptr_base + (xmax - x0) / <span class=\"number\">12</span> * ksize12;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> k = k0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; k + <span class=\"number\">3</span> &lt; kmax; k += <span class=\"number\">4</span>) {</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">float</span>* temp_inptr = inptr + k / PACK_C_SIZE * ldin + x0 * PACK_C_SIZE;</span><br><span class=\"line\">        prefetch_3x(temp_inptr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> x = x0;</span><br><span class=\"line\">        <span class=\"type\">float</span>* temp_outptr = outptr_base;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; x + <span class=\"number\">12</span> &lt;= xmax; x += <span class=\"number\">12</span>) {</span><br><span class=\"line\">            <span class=\"type\">float</span>* outptr_interleave = temp_outptr;</span><br><span class=\"line\">            transpose_1x12_4_s(temp_inptr, outptr_interleave);</span><br><span class=\"line\">            temp_outptr += ksize12;</span><br><span class=\"line\">            temp_inptr += <span class=\"number\">4</span> * <span class=\"number\">12</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        temp_outptr = outptr_base4;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; x + <span class=\"number\">4</span> &lt;= xmax; x += <span class=\"number\">4</span>) {</span><br><span class=\"line\">            <span class=\"type\">float</span>* outptr_interleave = temp_outptr;</span><br><span class=\"line\">            <span class=\"keyword\">asm</span> <span class=\"title function_\">volatile</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"string\">\"ld4 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[inptr0]], #64\\n\"</span></span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"string\">\"st1 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[outptr0]]\\n\"</span></span></span><br><span class=\"line\"><span class=\"params\">                    : [inptr0] <span class=\"string\">\"+r\"</span>(temp_inptr), [outptr0] <span class=\"string\">\"+r\"</span>(outptr_interleave)</span></span><br><span class=\"line\"><span class=\"params\">                    :</span></span><br><span class=\"line\"><span class=\"params\">                    : <span class=\"string\">\"v0\"</span>, <span class=\"string\">\"v1\"</span>, <span class=\"string\">\"v2\"</span>, <span class=\"string\">\"v3\"</span>, <span class=\"string\">\"memory\"</span>)</span>;</span><br><span class=\"line\">            temp_outptr += ksize4;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; xmax) {</span><br><span class=\"line\">            <span class=\"built_in\">memcpy</span>(tmpbuff, temp_inptr, <span class=\"keyword\">sizeof</span>(<span class=\"type\">float</span>) * (xmax - x) * PACK_C_SIZE);</span><br><span class=\"line\">            <span class=\"type\">float</span>* outptr_interleave = temp_outptr;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">float</span>* tmp_ptr = &amp;tmpbuff[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">asm</span> <span class=\"title function_\">volatile</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"string\">\"ld4 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[inptr0]], #64\\n\"</span></span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"string\">\"st1 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[outptr0]]\\n\"</span></span></span><br><span class=\"line\"><span class=\"params\">                    : [inptr0] <span class=\"string\">\"+r\"</span>(tmp_ptr), [outptr0] <span class=\"string\">\"+r\"</span>(outptr_interleave)</span></span><br><span class=\"line\"><span class=\"params\">                    :</span></span><br><span class=\"line\"><span class=\"params\">                    : <span class=\"string\">\"v0\"</span>, <span class=\"string\">\"v1\"</span>, <span class=\"string\">\"v2\"</span>, <span class=\"string\">\"v3\"</span>, <span class=\"string\">\"memory\"</span>)</span>;</span><br><span class=\"line\">            temp_outptr += ksize4;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        outptr_base += <span class=\"number\">12</span> * <span class=\"number\">4</span>;</span><br><span class=\"line\">        outptr_base4 += <span class=\"number\">4</span> * <span class=\"number\">4</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>汇编实现: kernel func</strong></p>\n<p> 根据实现细节，实现一个M8N12K4的算子需要以下几个分层运算函数:<code>kern_8x12_bias_relu</code>,<code>kern_8x4_bias_relu</code>,<code>kern_4x12_bias_relu</code>,<code>kern_4x4_bias_relu</code>,这些都是基于汇编语言实现的。以主要的<code>kern_8x12_bias_relu</code>为例子，来看一下这个函数是如何实现分层计算的。<br> 需要理解的汇编语言操作如下表</p>\n<ol>\n<li>eor   异或操作 </li>\n<li>ld1   从内存中加载数据 </li>\n<li>prfm  预取内存到缓存 </li>\n<li>cmp   比较操作符 </li>\n<li>fmla  向量乘加操作 </li>\n<li>bne   比较结果不相等时跳转 </li>\n<li>st1   将寄存器的数据写入内存</li>\n</ol>\n<p> 根据优化思路的第2步，首先你需要加载A的8个元素（2个寄存器）和B的12个元素（3个寄存器）到cache中，再为中间结果矩阵准备24个寄存器。<br> 在以下这段汇编代码中，首先通过异或操作<code>eor</code>清空了8-31寄存器的所有字节（x.16b），一共24个，这些寄存器是为了存储中间结果准备的。用output0和output1两个指针作为输出，并通过<code>prfm</code> 把他们预取到缓存中。以下是汇编代码的主体实现，实际使用时，arm架构有32个128位的寄存器，除去以上的29个，另外空闲的3个处理器分给B做数据的预取。</p>\n<ul>\n<li><p>Code</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"eor  v8.16b, v8.16b, v8.16b     \\n\"</span> # 清空v8寄存器，下同</span><br><span class=\"line\"><span class=\"string\">\"eor  v9.16b, v9.16b, v9.16b     \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v10.16b, v10.16b, v10.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"prfm pstl1keep, [%[output0]]    \\n\"</span> # 预取</span><br><span class=\"line\"><span class=\"string\">\"eor  v11.16b, v11.16b, v11.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v12.16b, v12.16b, v12.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v13.16b, v13.16b, v13.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"prfm pstl1keep, [%[output1]]    \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v14.16b, v14.16b, v14.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v15.16b, v15.16b, v15.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v2.4s}, [%[b_ptr]], #16    \\n\"</span> # v2加载B的四个字节，同时将指针向后移<span class=\"number\">16</span>个字节</span><br><span class=\"line\"><span class=\"string\">\"eor  v16.16b, v16.16b, v16.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v17.16b, v17.16b, v17.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v18.16b, v18.16b, v18.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v19.16b, v19.16b, v19.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v20.16b, v20.16b, v20.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v3.4s}, [%[b_ptr]], #16    \\n\"</span> # v3加载B的四个字节，同时将指针向后移<span class=\"number\">16</span>个字节</span><br><span class=\"line\"><span class=\"string\">\"eor  v21.16b, v21.16b, v21.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v22.16b, v22.16b, v22.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v23.16b, v23.16b, v23.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v4.4s}, [%[b_ptr]], #16    \\n\"</span> # v4加载B的四个字节，同时将指针向后移<span class=\"number\">16</span>个字节</span><br><span class=\"line\"><span class=\"string\">\"eor  v24.16b, v24.16b, v24.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v25.16b, v25.16b, v25.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v26.16b, v26.16b, v26.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v27.16b, v27.16b, v27.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v28.16b, v28.16b, v28.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v0.4s}, [%[a_ptr]], #16    \\n\"</span># v0加载A的四个字节，同时将指针向后移<span class=\"number\">16</span>个字节</span><br><span class=\"line\"><span class=\"string\">\"eor  v29.16b, v29.16b, v29.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v30.16b, v30.16b, v30.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"eor  v31.16b, v31.16b, v31.16b  \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"2: \\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"cmp %w[K], #0\\n\"</span>   #如果k=<span class=\"number\">0</span> 此时k=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"string\">\"beq 4f\\n\"</span>          </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"3:\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v8.4s,  v0.4s, v2.s[0]\\n\"</span>  # A的前四个元素和B的第一个元素相乘</span><br><span class=\"line\"><span class=\"string\">\"fmla v9.4s,  v0.4s, v2.s[1]\\n\"</span>  # A的前四个元素和B的第二个元素相乘</span><br><span class=\"line\"><span class=\"string\">\"ld1 {v1.4s}, [%[a_ptr]], 16\\n\"</span>  # v1加载A的四个字节，同时指针偏移</span><br><span class=\"line\"><span class=\"string\">\"fmla v10.4s, v0.4s, v2.s[2]\\n\"</span>  # A的前四个元素和B的第三个元素相乘</span><br><span class=\"line\"><span class=\"string\">\"fmla v11.4s, v0.4s, v2.s[3]\\n\"</span>  # A的前四个元素和B的第四个元素相乘</span><br><span class=\"line\"><span class=\"string\">\"ld1 {v5.4s}, [%[b_ptr]], #16\\n\"</span>   # v5加载B的四个字节，同时指针偏移</span><br><span class=\"line\"><span class=\"string\">\"fmla v12.4s, v0.4s, v3.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v13.4s, v0.4s, v3.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v6.4s}, [%[b_ptr]], #16\\n\"</span> # v6加载B的四个字节，同时指针偏移</span><br><span class=\"line\"><span class=\"string\">\"fmla v14.4s, v0.4s, v3.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v15.4s, v0.4s, v3.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v7.4s}, [%[b_ptr]], #16\\n\"</span> # v7加载B的四个字节，同时指针偏移</span><br><span class=\"line\"><span class=\"string\">\"fmla v16.4s, v0.4s, v4.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v17.4s, v0.4s, v4.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v18.4s, v0.4s, v4.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v19.4s, v0.4s, v4.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v0.4s}, [%[a_ptr]], 16\\n\"</span> # 此时A的前四个元素的计算完成，向后加载<span class=\"number\">4</span>个字节</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fmla v20.4s, v1.4s, v2.s[0]\\n\"</span> </span><br><span class=\"line\"><span class=\"string\">\"fmla v21.4s, v1.4s, v2.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v22.4s, v1.4s, v2.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v23.4s, v1.4s, v2.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v24.4s, v1.4s, v3.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v25.4s, v1.4s, v3.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v26.4s, v1.4s, v3.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v27.4s, v1.4s, v3.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v28.4s, v1.4s, v4.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v29.4s, v1.4s, v4.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v30.4s, v1.4s, v4.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v31.4s, v1.4s, v4.s[3]\\n\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fmla v8.4s,  v0.4s, v5.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v9.4s,  v0.4s, v5.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v1.4s}, [%[a_ptr]], 16\\n\"</span> # 此时A的第一个<span class=\"number\">8</span>x1的矩阵计算完毕，向后加载<span class=\"number\">4</span>个字节</span><br><span class=\"line\"><span class=\"string\">\"fmla v10.4s, v0.4s, v5.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v11.4s, v0.4s, v5.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v2.4s}, [%[b_ptr]], 16\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v12.4s, v0.4s, v6.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v13.4s, v0.4s, v6.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v3.4s}, [%[b_ptr]], 16\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v14.4s, v0.4s, v6.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v15.4s, v0.4s, v6.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v4.4s}, [%[b_ptr]], 16\\n\"</span> # B也向后加载一个<span class=\"number\">1</span>x12的矩阵分块</span><br><span class=\"line\"><span class=\"string\">\"fmla v16.4s, v0.4s, v7.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v17.4s, v0.4s, v7.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v18.4s, v0.4s, v7.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v19.4s, v0.4s, v7.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"ld1 {v0.4s}, [%[a_ptr]], 16\\n\"</span> # 同上</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"fmla v20.4s, v1.4s, v5.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v21.4s, v1.4s, v5.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v22.4s, v1.4s, v5.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v23.4s, v1.4s, v5.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v24.4s, v1.4s, v6.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"subs %w[K], %w[K], #1\\n\"</span> #处理K的大小</span><br><span class=\"line\"><span class=\"string\">\"fmla v25.4s, v1.4s, v6.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v26.4s, v1.4s, v6.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v27.4s, v1.4s, v6.s[3]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v28.4s, v1.4s, v7.s[0]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v29.4s, v1.4s, v7.s[1]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v30.4s, v1.4s, v7.s[2]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\"fmla v31.4s, v1.4s, v7.s[3]\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"bne 3b\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 后面是一些处理尾部的代码块，此处略</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "ospp"
            ]
        },
        {
            "id": "http://example.com/2022/03/24/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://example.com/2022/03/24/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "hexo-command",
            "date_published": "2022-03-24T06:34:13.000Z",
            "content_html": "<hr>\n<h3 id=\"Hexo部署博客常用命令记录\"><a href=\"#Hexo部署博客常用命令记录\" class=\"headerlink\" title=\"Hexo部署博客常用命令记录\"></a>Hexo部署博客常用命令记录</h3><ol>\n<li><p>常用命令组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp; hexo generate &amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存 &amp; 渲染界面 &amp; 部署至github</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<p>部署在本地4000端口上，可以在deploy前先进行预览</p>\n</li>\n<li><p>新增文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n #title#</span><br></pre></td></tr></table></figure>\n\n<p>根据提示找到对应的md文件夹，修改内容，使用hexo clean &amp; hexo generate &amp; hexo deploy 部署</p>\n</li>\n</ol>\n",
            "tags": [
                "hexo"
            ]
        }
    ]
}