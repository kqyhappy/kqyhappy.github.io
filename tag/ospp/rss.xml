<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>lcy&#39;s blog • Posts by &#34;ospp&#34; tag</title>
        <link>http://example.com</link>
        <description>学习/科研/生活/阅读</description>
        <language>zh-CN</language>
        <pubDate>Fri, 19 Jul 2024 11:12:35 +0800</pubDate>
        <lastBuildDate>Fri, 19 Jul 2024 11:12:35 +0800</lastBuildDate>
        <category>reading record</category>
        <category>life</category>
        <category>paper</category>
        <category>hexo</category>
        <category>kubernetes</category>
        <category>MLsys</category>
        <category>ospp</category>
        <item>
            <guid isPermalink="true">http://example.com/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/</guid>
            <title>如何优化gemm算子</title>
            <link>http://example.com/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/</link>
            <category>ospp</category>
            <pubDate>Fri, 19 Jul 2024 11:12:35 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近在做开源之下的项目，记录一下学习 gemm 的优化过程。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;gemm 即矩阵乘法，通常的 gemm 可表示为一个 MxK 的矩阵 A 和一个 KxN 的矩阵 B 相乘得到一个 MxN 的矩阵 C。矩阵计算的优化思路可以总结为以下几步，在这个博客中省去了对计算机组成原理的一些介绍。&lt;/p&gt;
&lt;h2 id=&#34;优化思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优化思路&#34;&gt;#&lt;/a&gt; 优化思路&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Split MNK&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步优化主要是&lt;strong&gt;基于计算机体系架构的 cache 结构，节省计算数据在 cache 和内存间读取的时间&lt;/strong&gt;。&lt;br&gt;
切分 MNK（根据 L1 cache 的大小），比如 arm64 中 FP32M8N12 就是将矩阵 A（MxK）切分为若干个（8xK）矩阵，将矩阵 B（KxN）切分为若干个（Kx12）的矩阵，在第 2 步中提到了为何这么切分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分层计算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步优化主要是&lt;strong&gt;节省中间数据在内存和 cache 之间换入换出&lt;/strong&gt;的时间。&lt;br&gt;
传统的 MNK 矩阵切分计算后，应该是 A 的小矩阵的每一&lt;strong&gt;行&lt;/strong&gt;乘上 B 的小矩阵的每一&lt;strong&gt;列&lt;/strong&gt;，这种做法比较低效，且存在很多冗余的重复加载。&lt;br&gt;
分层计算的核心是每次用 A 的小矩阵的每一&lt;strong&gt;列&lt;/strong&gt;（8 个元素，1X8 矩阵）和 B 的小矩阵的每一&lt;strong&gt;行&lt;/strong&gt;（12 个元素，12X1 矩阵）相乘，得到中间结果矩阵（一层 8x12 矩阵），在这个过程中，把每一个中间结果矩阵累加，就得到了小矩阵 8K 和小矩阵 K12 计算的结果（完整 8x12 矩阵）。&lt;br&gt;
以 arm64 架构的 CPU 为例子，有 32 个 128 位的 neon 向量寄存器，那么 M8N12 的每次分层计算中，A 需要从内存中读取 8 个元素，占用 2 个寄存器；B 需要从内存中读取 12 个元素，占用 3 个寄存器；C（中间结果）的形状为 8x12，需要占用 24 个寄存器来累加运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SIMD 优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步优化主要是&lt;strong&gt;通过并行计算提高数据运算的速度&lt;/strong&gt;。在 cache 计算中使用 SIMD 优化，并行计算元素与元素相乘的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存重排（pack）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步的优化主要是&lt;strong&gt;节省数据在内存中读取的时间&lt;/strong&gt;。&lt;br&gt;
以 x86 的 CPU 为例，矩阵在内存中是逐行存储的，一个 4x4 的矩阵 A 的存储顺序（由小到大）为&lt;/p&gt;
&lt;p&gt;| 0 | 1 | 2 | 3 |&lt;br&gt;
| 4 | 5 | 6 | 7 |&lt;br&gt;
| 8 | 9 | A | B |&lt;br&gt;
| C | D | E | F |&lt;/p&gt;
&lt;p&gt;假设该矩阵被分割成 2 个 2x2 的矩阵，在计算中需要逐列读取，那么第一个被读取的元素是 0 处的，第二个被读取的元素是 4 处的，他们的地址并不连续，这会浪费一定的寻址时间。因此，在 2x2 的分割下，需要针对该矩阵进行内存重排，重排后的顺序如下，这种重排叫做 zigzag，因为是按照之字型排序的。&lt;/p&gt;
&lt;p&gt;| 0 | 2 | 4 | 6 |&lt;br&gt;
| 1 | 3 | 5 | 7 |&lt;br&gt;
| 8 | A | C | E |&lt;br&gt;
| 9 | B | D | F |&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;example&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt; Example&lt;/h2&gt;
&lt;p&gt;以 Megcc 生成的算子 &lt;code&gt;Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS&lt;/code&gt;  为例子，分析一下如何实现 gemm 优化过后的算子。这是按照 M8N12K4 的分割的，想象一个三维的长方体分割就可以。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重排内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;kernel 的执行入口是 &lt;code&gt;void Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS&lt;/code&gt; ，该程序首先确认矩阵的内存空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code&lt;/p&gt;
  &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; pack_a_size = Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_workspace_a(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, M, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* pack_a = workspace; # 矩阵A的开始地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* pack_b = workspace + pack_a_size; #矩阵B的开始地址&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packa_n(pack_a, A, LDA, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, M, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, K); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 按照上述第&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;步对矩阵进行重排&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packb_n(pack_b, B, LDB, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, N, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, K); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 按照上述第&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;步对矩阵进行重排&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;矩阵计算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;矩阵的计算是逐 Block 进行的， M8N12K4 的计算方式中，每一个块的大小为 8x12x4。&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; m + m_block &amp;lt;= M; m += m_block) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* output = C + (m / pack_mk * LDC);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; n = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* cur_pack_b = pack_b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; n + n_block &amp;lt;= N; n += n_block) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            kern_8x12_bias_relu(pack_a, cur_pack_b, K, output, LDC, _bias_ptr); # 每一个小block的计算&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += n_block * pack_mk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur_pack_b += K12;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 当n不能被&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;整除时，剩下的n按照&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;分割计算。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; n &amp;lt; N; n += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            kern_8x4_bias_relu(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    pack_a, cur_pack_b, K, output, LDC, _bias_ptr,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    N - n &amp;gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; ? &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; : N - n); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    # 即使剩下的不能被&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;整除也按照&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;向上对齐处理。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; * pack_mk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur_pack_b += K4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pack_a += K8;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    #当m不能被&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;整除时，剩下的m的维度按照&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;整除计算。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; m &amp;lt; M; m += m_block_4) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* output = C + (m / pack_mk * LDC);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; n = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* cur_pack_b = pack_b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; n + n_block - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt; N; n += n_block) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            kern_4x12_bias_relu(pack_a, cur_pack_b, K, output, LDC, _bias_ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += n_block * pack_mk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur_pack_b += K12;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        #同上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; n &amp;lt; N; n += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            kern_4x4_bias_relu(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    pack_a, cur_pack_b, K, output, LDC, _bias_ptr,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    N - n &amp;gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; ? &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; : N - n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; * pack_mk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur_pack_b += K4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pack_a += K4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;汇编实现：内存重排&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对 A 进行内存重排的程序入口如下，矩阵 A 的形状为 [M/4, K/4, 4, 4]，如下图所示，A 矩阵在内存中首先以块顺序 0-7 存储，在每一块内按照 0-F 的顺序存储。对 A 进行内存重排后的形状为 [M/8, K, 8]，在图中为了方便理解，箭头方向为数据存储的方向，假设 M=16，K=8。&lt;/p&gt;
 &lt;center&gt;
     &lt;img src=&#34;/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/1.svg&#34; style=&#34;width:99%&#34;&gt;
 &lt;/center&gt;
&lt;p&gt;以下程序描述了如何进行内存重排的过程。首先需要两个指针 &lt;code&gt;inptr0&lt;/code&gt;  和 &lt;code&gt;inptr1&lt;/code&gt;  定位原矩阵的内存，其中 &lt;code&gt;inptr0&lt;/code&gt;  定位的是第 0 矩阵块（以下都称为块，描述的是上图中矩阵的分块情况）内存起点， &lt;code&gt;inptr1&lt;/code&gt;  定位的是第 2 块内存起点， &lt;code&gt;prefetch_2x&lt;/code&gt;  函数的作用是读取 32 个 fp32 数据，即 2 块，该函数将 0、1 和 2、3 块数据加载到缓存中， &lt;code&gt;interleave_2x4_4_s&lt;/code&gt;  是重排函数，作用是将载入缓存的块数据重排，具体如何展开请看后续。注意，若 m 不被 8 整除，需要在下一个循环代码中处理尾部数据。&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packa_n&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* inptr, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ldin, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y0, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ymax, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; kmax)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pack_mk = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; pack_m = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m_stride = pack_m * pack_mk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; min_m_stride = pack_mk * pack_mk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; y + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; &amp;lt; ymax; y += pack_m) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* inptr0 = inptr + y / pack_mk * ldin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* inptr1 = inptr0 + ldin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        prefetch_2x(inptr0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        prefetch_2x(inptr1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k = (kmax);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; k &amp;gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; k -= pack_mk) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            interleave_2x4_4_s(inptr0, inptr1, outptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            outptr += m_stride;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            inptr0 += min_m_stride;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            inptr1 += min_m_stride;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;# m不被8整除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; y &amp;lt; ymax; y += pack_mk) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* inptr0 = inptr + y / pack_mk * ldin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        prefetch_2x(inptr0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; K = (kmax);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; K &amp;gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; K -= pack_mk) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            interleave_1x4_4_s(inptr0, outptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            outptr += min_m_stride;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            inptr0 += min_m_stride;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重排函数实现的重点是函数 &lt;code&gt;interleave_2x4_4_s&lt;/code&gt;  ，下图描述了矩阵 A 内存重排的实现过程。其中 v0-v7 为寄存器。程序首先将数据加载到寄存器后，重排顺序后再输出到矩阵 A 的输出位置指针。&lt;/p&gt;
 &lt;center&gt;
     &lt;img src=&#34;/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/2.svg&#34; style=&#34;width:99%&#34;&gt;
 &lt;/center&gt;
&lt;p&gt;对 B 实现内存重排的原理类似，其原始形状为 [K/4, N, 4]，重排后形状为 [N/12, K, 12]，其形状变化和内存排序如下图所示，和 A 相比，需要多进行一个类似转置的操作。如下图所示，该重排把一个 4x12 的矩阵块（第一块绿色，紫色，黄色的三块）重排成了一个 12x4 的矩阵块。&lt;/p&gt;
 &lt;center&gt;
     &lt;img src=&#34;/2024/07/19/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96gemm%E7%AE%97%E5%AD%90/3.svg&#34; style=&#34;width:99%&#34;&gt;
 &lt;/center&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Arm64_fp32_m8_n12_mk4_matmul_NO_BIAS_packb_n&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* inptr, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ldin, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x0, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; xmax, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; kmax)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt; tmpbuff[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;] = {&lt;span class=&#34;number&#34;&gt;0.0f&lt;/span&gt;};&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; PACK_C_SIZE = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ksize = kmax - k0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ksize12 = ksize * &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ksize4 = (ksize &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr_base = outptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr_base4 = outptr_base + (xmax - x0) / &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; * ksize12;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; k = k0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; k + &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; &amp;lt; kmax; k += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* temp_inptr = inptr + k / PACK_C_SIZE * ldin + x0 * PACK_C_SIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        prefetch_3x(temp_inptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x = x0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* temp_outptr = outptr_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; x + &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; &amp;lt;= xmax; x += &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr_interleave = temp_outptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            transpose_1x12_4_s(temp_inptr, outptr_interleave);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp_outptr += ksize12;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp_inptr += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        temp_outptr = outptr_base4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (; x + &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; &amp;lt;= xmax; x += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr_interleave = temp_outptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&#34;ld4 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[inptr0]], #64\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&#34;st1 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[outptr0]]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    : [inptr0] &lt;span class=&#34;string&#34;&gt;&#34;+r&#34;&lt;/span&gt;(temp_inptr), [outptr0] &lt;span class=&#34;string&#34;&gt;&#34;+r&#34;&lt;/span&gt;(outptr_interleave)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    :&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    : &lt;span class=&#34;string&#34;&gt;&#34;v0&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;v1&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;v2&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;v3&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;memory&#34;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp_outptr += ksize4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x &amp;lt; xmax) {&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;memcpy&lt;/span&gt;(tmpbuff, temp_inptr, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;) * (xmax - x) * PACK_C_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* outptr_interleave = temp_outptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt;* tmp_ptr = &amp;amp;tmpbuff[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;asm&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;volatile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&#34;ld4 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[inptr0]], #64\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&#34;st1 {v0.4s, v1.4s, v2.4s, v3.4s},  [%[outptr0]]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    : [inptr0] &lt;span class=&#34;string&#34;&gt;&#34;+r&#34;&lt;/span&gt;(tmp_ptr), [outptr0] &lt;span class=&#34;string&#34;&gt;&#34;+r&#34;&lt;/span&gt;(outptr_interleave)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    :&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;                    : &lt;span class=&#34;string&#34;&gt;&#34;v0&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;v1&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;v2&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;v3&#34;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&#34;memory&#34;&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp_outptr += ksize4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outptr_base += &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        outptr_base4 += &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;汇编实现: kernel func&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据实现细节，实现一个 M8N12K4 的算子需要以下几个分层运算函数: &lt;code&gt;kern_8x12_bias_relu&lt;/code&gt; , &lt;code&gt;kern_8x4_bias_relu&lt;/code&gt; , &lt;code&gt;kern_4x12_bias_relu&lt;/code&gt; , &lt;code&gt;kern_4x4_bias_relu&lt;/code&gt; , 这些都是基于汇编语言实现的。以主要的 &lt;code&gt;kern_8x12_bias_relu&lt;/code&gt;  为例子，来看一下这个函数是如何实现分层计算的。&lt;br&gt;
需要理解的汇编语言操作如下表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;eor   异或操作&lt;/li&gt;
&lt;li&gt;ld1   从内存中加载数据&lt;/li&gt;
&lt;li&gt;prfm  预取内存到缓存&lt;/li&gt;
&lt;li&gt;cmp   比较操作符&lt;/li&gt;
&lt;li&gt;fmla  向量乘加操作&lt;/li&gt;
&lt;li&gt;bne   比较结果不相等时跳转&lt;/li&gt;
&lt;li&gt;st1   将寄存器的数据写入内存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据优化思路的第 2 步，首先你需要加载 A 的 8 个元素（2 个寄存器）和 B 的 12 个元素（3 个寄存器）到 cache 中，再为中间结果矩阵准备 24 个寄存器。&lt;br&gt;
在以下这段汇编代码中，首先通过异或操作 &lt;code&gt;eor&lt;/code&gt;  清空了 8-31 寄存器的所有字节（x.16b），一共 24 个，这些寄存器是为了存储中间结果准备的。用 output0 和 output1 两个指针作为输出，并通过 &lt;code&gt;prfm&lt;/code&gt;  把他们预取到缓存中。以下是汇编代码的主体实现，实际使用时，arm 架构有 32 个 128 位的寄存器，除去以上的 29 个，另外空闲的 3 个处理器分给 B 做数据的预取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code&lt;/p&gt;
  &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v8.16b, v8.16b, v8.16b     \n&#34;&lt;/span&gt; # 清空v8寄存器，下同&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v9.16b, v9.16b, v9.16b     \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v10.16b, v10.16b, v10.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;prfm pstl1keep, [%[output0]]    \n&#34;&lt;/span&gt; # 预取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v11.16b, v11.16b, v11.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v12.16b, v12.16b, v12.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v13.16b, v13.16b, v13.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;prfm pstl1keep, [%[output1]]    \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v14.16b, v14.16b, v14.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v15.16b, v15.16b, v15.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v2.4s}, [%[b_ptr]], #16    \n&#34;&lt;/span&gt; # v2加载B的四个字节，同时将指针向后移&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;个字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v16.16b, v16.16b, v16.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v17.16b, v17.16b, v17.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v18.16b, v18.16b, v18.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v19.16b, v19.16b, v19.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v20.16b, v20.16b, v20.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v3.4s}, [%[b_ptr]], #16    \n&#34;&lt;/span&gt; # v3加载B的四个字节，同时将指针向后移&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;个字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v21.16b, v21.16b, v21.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v22.16b, v22.16b, v22.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v23.16b, v23.16b, v23.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v4.4s}, [%[b_ptr]], #16    \n&#34;&lt;/span&gt; # v4加载B的四个字节，同时将指针向后移&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;个字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v24.16b, v24.16b, v24.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v25.16b, v25.16b, v25.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v26.16b, v26.16b, v26.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v27.16b, v27.16b, v27.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v28.16b, v28.16b, v28.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v0.4s}, [%[a_ptr]], #16    \n&#34;&lt;/span&gt;# v0加载A的四个字节，同时将指针向后移&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;个字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v29.16b, v29.16b, v29.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v30.16b, v30.16b, v30.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;eor  v31.16b, v31.16b, v31.16b  \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;2: \n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;cmp %w[K], #0\n&#34;&lt;/span&gt;   #如果k=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; 此时k=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;beq 4f\n&#34;&lt;/span&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;3:\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v8.4s,  v0.4s, v2.s[0]\n&#34;&lt;/span&gt;  # A的前四个元素和B的第一个元素相乘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v9.4s,  v0.4s, v2.s[1]\n&#34;&lt;/span&gt;  # A的前四个元素和B的第二个元素相乘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v1.4s}, [%[a_ptr]], 16\n&#34;&lt;/span&gt;  # v1加载A的四个字节，同时指针偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v10.4s, v0.4s, v2.s[2]\n&#34;&lt;/span&gt;  # A的前四个元素和B的第三个元素相乘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v11.4s, v0.4s, v2.s[3]\n&#34;&lt;/span&gt;  # A的前四个元素和B的第四个元素相乘&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v5.4s}, [%[b_ptr]], #16\n&#34;&lt;/span&gt;   # v5加载B的四个字节，同时指针偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v12.4s, v0.4s, v3.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v13.4s, v0.4s, v3.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v6.4s}, [%[b_ptr]], #16\n&#34;&lt;/span&gt; # v6加载B的四个字节，同时指针偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v14.4s, v0.4s, v3.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v15.4s, v0.4s, v3.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v7.4s}, [%[b_ptr]], #16\n&#34;&lt;/span&gt; # v7加载B的四个字节，同时指针偏移&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v16.4s, v0.4s, v4.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v17.4s, v0.4s, v4.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v18.4s, v0.4s, v4.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v19.4s, v0.4s, v4.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v0.4s}, [%[a_ptr]], 16\n&#34;&lt;/span&gt; # 此时A的前四个元素的计算完成，向后加载&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;个字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v20.4s, v1.4s, v2.s[0]\n&#34;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v21.4s, v1.4s, v2.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v22.4s, v1.4s, v2.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v23.4s, v1.4s, v2.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v24.4s, v1.4s, v3.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v25.4s, v1.4s, v3.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v26.4s, v1.4s, v3.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v27.4s, v1.4s, v3.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v28.4s, v1.4s, v4.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v29.4s, v1.4s, v4.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v30.4s, v1.4s, v4.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v31.4s, v1.4s, v4.s[3]\n&#34;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v8.4s,  v0.4s, v5.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v9.4s,  v0.4s, v5.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v1.4s}, [%[a_ptr]], 16\n&#34;&lt;/span&gt; # 此时A的第一个&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;x1的矩阵计算完毕，向后加载&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;个字节&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v10.4s, v0.4s, v5.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v11.4s, v0.4s, v5.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v2.4s}, [%[b_ptr]], 16\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v12.4s, v0.4s, v6.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v13.4s, v0.4s, v6.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v3.4s}, [%[b_ptr]], 16\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v14.4s, v0.4s, v6.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v15.4s, v0.4s, v6.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v4.4s}, [%[b_ptr]], 16\n&#34;&lt;/span&gt; # B也向后加载一个&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;x12的矩阵分块&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v16.4s, v0.4s, v7.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v17.4s, v0.4s, v7.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v18.4s, v0.4s, v7.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v19.4s, v0.4s, v7.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;ld1 {v0.4s}, [%[a_ptr]], 16\n&#34;&lt;/span&gt; # 同上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v20.4s, v1.4s, v5.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v21.4s, v1.4s, v5.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v22.4s, v1.4s, v5.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v23.4s, v1.4s, v5.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v24.4s, v1.4s, v6.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;subs %w[K], %w[K], #1\n&#34;&lt;/span&gt; #处理K的大小&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v25.4s, v1.4s, v6.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v26.4s, v1.4s, v6.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v27.4s, v1.4s, v6.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v28.4s, v1.4s, v7.s[0]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v29.4s, v1.4s, v7.s[1]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v30.4s, v1.4s, v7.s[2]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;fmla v31.4s, v1.4s, v7.s[3]\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&#34;bne 3b\n&#34;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 后面是一些处理尾部的代码块，此处略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
