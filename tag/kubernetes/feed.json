{
    "version": "https://jsonfeed.org/version/1",
    "title": "lcy's blog • All posts by \"kubernetes\" tag",
    "description": "学习/科研/生活/阅读",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/08/%E4%BD%BF%E7%94%A8kubernetes-API-Python-%E6%9D%A5%E6%8E%A7%E5%88%B6%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8%E5%AF%B9%E8%B1%A1%E7%9A%84CURD/",
            "url": "http://example.com/2022/04/08/%E4%BD%BF%E7%94%A8kubernetes-API-Python-%E6%9D%A5%E6%8E%A7%E5%88%B6%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8%E5%AF%B9%E8%B1%A1%E7%9A%84CURD/",
            "title": "使用kubernetes API(Python)来控制集群内部对象的CURD",
            "date_published": "2022-04-08T14:07:45.000Z",
            "content_html": "<p>写在前面：依旧是疫情远程实验室中，不知道为什么我的kubernetes集群突然集体更换了ip地址，真的很诡异desu…重新配集群的话我会想死，最后使用了一个基于Go语言的二进制一键离线部署安装工具sealos，基本上只要指定三个节点的地址，不过不知道为啥似乎只能使用root用户来进行操作（可能是前置的一些设置没有设置）。</p>\n<span id=\"more\"></span>\n\n<p>sealos地址：<a href=\"https://github.com/fanux/sealos\">https://github.com/fanux/sealos</a></p>\n<p>使用sealos时三台虚拟机上要开启ssh服务，通过以下命令安装并且开放权限（我的系统是ubuntu20.04）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install ssh</span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 PermitRootLogin = <span class=\"built_in\">yes</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">restart ssh 服务</span></span><br></pre></td></tr></table></figure>\n\n<p>以下是新的系统配置</p>\n<table>\n<thead>\n<tr>\n<th>ip地址</th>\n<th>节点类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.2.113</td>\n<td>master</td>\n</tr>\n<tr>\n<td>192.168.2.114</td>\n<td>node</td>\n</tr>\n<tr>\n<td>192.168.2.115</td>\n<td>node</td>\n</tr>\n</tbody></table>\n<p>最近主要研究实现了怎么使用kubernetes的api接口来管理kubernetes集群，使用的语言是python，python-kubernetes-client的官方地址如下：<a href=\"https://github.com/kubernetes-client/python/tree/master/kubernetes\">https://github.com/kubernetes-client/python/tree/master/kubernetes</a></p>\n<h3 id=\"引入kubernetes包\"><a href=\"#引入kubernetes包\" class=\"headerlink\" title=\"引入kubernetes包\"></a>引入kubernetes包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip install kubernetes</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下使用到了kubernetes官方库的config和client,因此可以这样写</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes <span class=\"keyword\">import</span> config, client</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集群内部控制\"><a href=\"#集群内部控制\" class=\"headerlink\" title=\"集群内部控制\"></a>集群内部控制</h3><p>我搭建的系统是在pod内去修改kubernetes的资源，首先在对系统的修改之前，需要访问系统的配置文件，得到系统的相关配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.load_incluster_config()</span><br><span class=\"line\"><span class=\"comment\"># incluster表示在节点内</span></span><br></pre></td></tr></table></figure>\n\n<p>得到系统配置后，我们可以通过建立相关的api创建、更新、访问相关资源，以下以项目中用到的Job和Server为例，在实际创建过程中，可能会遇到403错误，该错误可以通过设置rbac解决，使用的yaml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span> <span class=\"comment\"># 似乎是在这里添加权限</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;pods&quot;</span>, <span class=\"string\">&quot;services&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>]</span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;batch&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;jobs&quot;</span>, <span class=\"string\">&quot;jobs/status&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test-bind</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建和管理Job\"><a href=\"#创建和管理Job\" class=\"headerlink\" title=\"创建和管理Job\"></a>创建和管理Job</h4><p>job的api-group是batch，通过以下命令来创建相关的api，成功创建后就可以管理job资源</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">batch_v1 = client.BatchV1Api()</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建job</strong></p>\n<p>删除job的逻辑写在创建job的时候，spec.ttlSecondsAfterFinished，代表job完工30秒后删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_container</span>():</span><br><span class=\"line\">    port_list = [<span class=\"number\">8888</span>, <span class=\"number\">8889</span>]</span><br><span class=\"line\">    container_port_list = <span class=\"built_in\">list</span>()</span><br><span class=\"line\">    container_name = <span class=\"string\">&quot;pi&quot;</span> + <span class=\"built_in\">str</span>(uuid.uuid1())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> port <span class=\"keyword\">in</span> port_list:</span><br><span class=\"line\">        container_port = <span class=\"built_in\">int</span>(port)</span><br><span class=\"line\">        c_port = client.V1ContainerPort(container_port=container_port)</span><br><span class=\"line\">        container_port_list.append(c_port)</span><br><span class=\"line\">    container = client.V1Container(</span><br><span class=\"line\">        name=container_name,</span><br><span class=\"line\">        image=<span class=\"string\">&quot;lcy200077/exec:v1.1&quot;</span>,</span><br><span class=\"line\">        ports=container_port_list</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> container</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_job_object</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Configurate Pod template container</span></span><br><span class=\"line\">    container = create_container()</span><br><span class=\"line\">    <span class=\"comment\"># Create and configure a spec section</span></span><br><span class=\"line\">    job_name = <span class=\"string\">&#x27;pi&#x27;</span> + <span class=\"built_in\">str</span>(uuid.uuid1())</span><br><span class=\"line\">    template = client.V1PodTemplateSpec(</span><br><span class=\"line\">        metadata=client.V1ObjectMeta(labels=&#123;<span class=\"string\">&quot;app&quot;</span>: <span class=\"string\">&quot;pi&quot;</span>&#125;),</span><br><span class=\"line\">        spec=client.V1PodSpec(restart_policy=<span class=\"string\">&quot;Never&quot;</span>, containers=[container], node_name=node))</span><br><span class=\"line\">    <span class=\"comment\"># Create the specification of deployment</span></span><br><span class=\"line\">    spec = client.V1JobSpec(</span><br><span class=\"line\">        template=template,</span><br><span class=\"line\">        ttl_seconds_after_finished=<span class=\"number\">30</span>,</span><br><span class=\"line\">        backoff_limit=<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 三十秒后删除</span></span><br><span class=\"line\">    <span class=\"comment\"># Instantiate the job object</span></span><br><span class=\"line\">    job = client.V1Job(</span><br><span class=\"line\">        api_version=<span class=\"string\">&quot;batch/v1&quot;</span>,</span><br><span class=\"line\">        kind=<span class=\"string\">&quot;Job&quot;</span>,</span><br><span class=\"line\">        metadata=client.V1ObjectMeta(name=job_name),</span><br><span class=\"line\">        spec=spec)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> job, job_name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_job</span>(<span class=\"params\">api_instance, job, job_name</span>):</span><br><span class=\"line\">    api_response = api_instance.create_namespaced_job(</span><br><span class=\"line\">        body=job,</span><br><span class=\"line\">        namespace=<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Job created. status=&#x27;%s&#x27;&quot;</span> % <span class=\"built_in\">str</span>(api_response.status))</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取Job信息</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_job_status</span>(<span class=\"params\">api_instance, job_name</span>):</span><br><span class=\"line\">    job_completed = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> job_completed:</span><br><span class=\"line\">        api_response = api_instance.read_namespaced_job_status(</span><br><span class=\"line\">            name=job_name,</span><br><span class=\"line\">            namespace=<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> api_response.status.succeeded <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">                api_response.status.failed <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            job_completed = <span class=\"literal\">True</span></span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Job status=&#x27;%s&#x27;&quot;</span> % <span class=\"built_in\">str</span>(api_response.status))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建和管理service\"><a href=\"#创建和管理service\" class=\"headerlink\" title=\"创建和管理service\"></a>创建和管理service</h4><p>service采用manifest的方法创建，其中将service对应的job作为依赖项，当job被删除的时候，kubernetes的垃圾回收机制会自动回收掉依赖job的Service</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_service</span>(<span class=\"params\">api, job_name</span>):</span><br><span class=\"line\">    batch_v1 = client.BatchV1Api()</span><br><span class=\"line\">    job_response = batch_v1.read_namespaced_job_status(</span><br><span class=\"line\">            name=job_name,</span><br><span class=\"line\">            namespace=<span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    uid = job_response.metadata.uid</span><br><span class=\"line\">    <span class=\"keyword\">global</span> num</span><br><span class=\"line\">    service_name = <span class=\"string\">&quot;pi&quot;</span> + <span class=\"built_in\">str</span>(uuid.uuid1())</span><br><span class=\"line\">    node_p1 = <span class=\"number\">30030</span> + num * <span class=\"number\">2</span></span><br><span class=\"line\">    node_p2 = <span class=\"number\">30030</span> + num * <span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    service_manifest = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;apiVersion&quot;</span>: <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;Service&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;metadata&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;labels&quot;</span>: &#123;<span class=\"string\">&quot;name&quot;</span>: service_name&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>: service_name,</span><br><span class=\"line\">            <span class=\"string\">&quot;resourceversion&quot;</span>: <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;ownerReferences&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;Job&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: job_name,</span><br><span class=\"line\">                <span class=\"string\">&quot;apiVersion&quot;</span>: <span class=\"string\">&quot;batch/v1&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;uid&quot;</span>: uid</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;spec&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;NodePort&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;ports&quot;</span>: [</span><br><span class=\"line\">                &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;p1&quot;</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;port&quot;</span>: <span class=\"number\">80</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;protocol&quot;</span>: <span class=\"string\">&quot;TCP&quot;</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;targetPort&quot;</span>: <span class=\"number\">8888</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;nodePort&quot;</span>: node_p1</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;<span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;p2&quot;</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;port&quot;</span>: <span class=\"number\">81</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;protocol&quot;</span>: <span class=\"string\">&quot;TCP&quot;</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;targetPort&quot;</span>: <span class=\"number\">8889</span>, </span><br><span class=\"line\">                 <span class=\"string\">&quot;nodePort&quot;</span>: node_p2</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;selector&quot;</span>: &#123;<span class=\"string\">&quot;job-name&quot;</span>: job_name&#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    service = api.create(body=service_manifest, namespace=<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Service &quot;</span> + service_name + <span class=\"string\">&quot;created&quot;</span>)</span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node_p1, node_p2</span><br></pre></td></tr></table></figure>\n\n<p><strong>ownerReference</strong></p>\n<p>是依赖项，在spec中设置，一般来说kubernetes会自动配置，也可以手动配置，一个ownerReference需要以下几个参数，缺一不可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;ownerReferences&quot;</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;kind&quot;</span>: <span class=\"string\">&quot;Job&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: job_name, </span><br><span class=\"line\">    <span class=\"string\">&quot;apiVersion&quot;</span>: <span class=\"string\">&quot;batch/v1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;uid&quot;</span>: uid <span class=\"comment\">#可以通过api get来获取</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "kubernetes"
            ]
        },
        {
            "id": "http://example.com/2022/03/24/k8s-%E5%A6%82%E4%BD%95%E5%B0%86python%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%88%90service/",
            "url": "http://example.com/2022/03/24/k8s-%E5%A6%82%E4%BD%95%E5%B0%86python%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%88%90service/",
            "title": "k8s-如何将python项目部署成service",
            "date_published": "2022-03-24T08:26:24.000Z",
            "content_html": "<p>毕业设计需要设计一个kubernetes的系统，寒假前在实验室的电脑上搭建了k8s的集群，但是寒假后回来不知道为什么集群失效了。。重新配置又花了很久时间，正式开始推进毕设大概两周，主要做的工作是把图片识别的python项目部署到了k8s的集群上（顺便可视化了一下）。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h3><table>\n<thead>\n<tr>\n<th>主机ip</th>\n<th>名称</th>\n<th>系统</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>192.168.1.129</td>\n<td>k8s-master01</td>\n<td>ubuntu</td>\n</tr>\n<tr>\n<td>192.168.1.130</td>\n<td>k8s-node01</td>\n<td>ubuntu</td>\n</tr>\n<tr>\n<td>192.168.1.131</td>\n<td>k8s-node02</td>\n<td>ubuntu</td>\n</tr>\n</tbody></table>\n<h3 id=\"Docker-image的创建\"><a href=\"#Docker-image的创建\" class=\"headerlink\" title=\"Docker image的创建\"></a>Docker image的创建</h3><p>kubernetes本质上来说还是一个管理dokcer的工具，因此首先需要制作Dockerfile把我们的python项目制作成镜像，我使用了winscp把python项目文件夹复制到了虚拟机上，进入该目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi Dockerfile # 创建Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>Dockerfile的内容如下</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.8</span>-slim-buster <span class=\"comment\"># 拉取基础镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app <span class=\"comment\"># 设置容器内的工作目录，和容器外无关</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt requirements.txt <span class=\"comment\"># 设置依赖包，由于实验环境用到了torch包，很大，创建第一个镜像的时候用了特别久</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip3 install -r requirements.txt <span class=\"comment\"># 下载依赖包</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . . <span class=\"comment\"># 把python项目内的所有文件复制到docker镜像中 </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;python&quot;</span>,<span class=\"string\">&quot;test.py&quot;</span>] <span class=\"comment\"># 容器执行的命令，需要是一个不断执行的命令，不然容器会反复创建运行，并且报错</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8888</span> <span class=\"comment\"># 暴露8888端口，我在后续的python代码中又暴露了一个端口，直接在yaml文件里设置了，也成功了，貌似这里不用设置</span></span><br></pre></td></tr></table></figure>\n\n<p>输入：wq保存并且退出，输入以下命令，创建镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t lcy200077/app:v1 .</span><br></pre></td></tr></table></figure>\n\n<p>出现successful提示后，输入以下命令就可以看见多了一个名称为 <em>lcy200077&#x2F;app</em> 的镜像，版本是v1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传镜像至中央仓库\"><a href=\"#上传镜像至中央仓库\" class=\"headerlink\" title=\"上传镜像至中央仓库\"></a>上传镜像至中央仓库</h3><p>成功创建 <em>lcy200077&#x2F;app</em> 镜像后，下一步是把docker镜像上传至中央仓库，这一步的前提是需要在<a href=\"https://registry.hub.docker.com/\">DockerHub</a>上注册账号，非常便捷，上传后就可以随时随地拉取</p>\n<p>注意在上传镜像时，dokcer镜像的名称必须是 <em>username&#x2F;xxx</em> ，其中username是个人在<a href=\"https://registry.hub.docker.com/\">DockerHub</a>上的用户名，xxx是镜像的名字，可以任意</p>\n<p>第一步是在ubuntu虚拟机上登录dockerhub的账号，输入以下命令，出现对应提示后输入用户名和密码，若成功，会提示success</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br></pre></td></tr></table></figure>\n\n<p>在build该镜像的虚拟机上执行以下命令，将镜像push到中央仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push lcy200077/app:v1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写YAML文件与创建service服务\"><a href=\"#编写YAML文件与创建service服务\" class=\"headerlink\" title=\"编写YAML文件与创建service服务\"></a>编写YAML文件与创建service服务</h3><p>服务可以通过yaml文件在master节点上使用以下命令创建</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f xxx.yaml</span><br></pre></td></tr></table></figure>\n\n<p>我的实验环境中，每一个node节点跑一个指定的docker容器，master节点的负责负载均衡的算法调配，以下yaml文件以node01节点上部署的服务为例子（实际上我对于yaml文件的写法只知道个大概）</p>\n<p>其中replicas指定了容器的数量，image指定了拉取的镜像，nodeName指定了跑在哪个节点上，如果不确定节点名称可以通过 <em>kubectl get nodes</em> 命令在master节点上查看，containerPort指定了容器暴露的端口，我的两个端口一个用于收取信息一个用于发送信息，连接方式都是TCP，service部分的type指定了服务向外界暴露的方式，即通过端口nodePort，指定端口30026对应容器端口8888，指定端口30027对应端口8889。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-python-app</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-python</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-python</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-python</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">nodeName:</span> <span class=\"string\">k8s-node01</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">my-python</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">lcy200077/app:v1</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8888</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8889</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-python-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-python</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8888</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30026</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">81</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">8889</span></span><br><span class=\"line\">      <span class=\"attr\">nodePort:</span> <span class=\"number\">30027</span></span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令部署服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f app.yaml</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令查看部署的服务，若状态是running，就是运行成功，可以通信了~</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get service / kubectl get svc # 查看部署成功的服务，会显示my-python-xxxx，以及端口</span><br><span class=\"line\">kubectl get pod / kubectl get po # 查看部署的pod，一个pod内是一个容器</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令查看pod的状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe po my-python-xxx #最后一个为pod的名字</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n",
            "tags": [
                "kubernetes"
            ]
        }
    ]
}